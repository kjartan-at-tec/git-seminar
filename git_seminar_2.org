#+OPTIONS: toc:nil
# #+LaTeX_CLASS: koma-article

#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation,aspectratio=1610]
#+OPTIONS: H:2

#+LaTex_HEADER: \usepackage{khpreamble}

#+title: git and GitHub - Collaboration and workflow
#+date:

* Objective
** Goal
  *Understanding how to collaborate with git and GitHub*

* Resources
** (Re)sources

   -  [[https://git-scm.com/book/en/v2/]]
   -  https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet
   -  https://desktop.github.com

* Repetition
** Version control the git way
   #+BEGIN_CENTER
    \includegraphics[width=0.8\linewidth]{figures/checkins.png}
   #+END_CENTER

** Version control the git way

   It is *distributed*!

   #+BEGIN_CENTER
    \includegraphics[width=0.5\linewidth]{figures/distributed.png}
   #+END_CENTER

** Branch, commit, merge and rebase
   - To create a branch and checking it out immediately:
     =git checkout -b newFeature=
     Next commit will be on the newFeature branch
   - To merge commits done on newFeature into the master branch:
     =git checkout master; git merge newFeature=
     This creates a new commit containing the merge
   - To move the commits done on newFeature onto the master branch
     =git rebase master=
     This is  done while on newFeature

** Reset and revert						   :noexport:
   If you made a mistake in a commit, and want to redo it
   - If the commit is the last commit:
     =git reset HEAD^==


* Collaboration

** A useful model for collaboration
   https://nvie.com/files/Git-branching-model.pdf

   From https://nvie.com/posts/a-successful-git-branching-model/

** Principles
   * Keep the =master= branch production-ready at *all times*
   * Do all development in branches
   * Use *pull requests* to handle suggested changes to the =master= branch
   * Two models: *Fork and Pull* and *Shared Repository*
     - Fork and pull :: Contributors fork the repository, make changes and make pull requests
     - Shared repository :: Contributors have push rights to original repository 

** Fork clone and add upstream
   After forking and cloning:
#+BEGIN_SRC shell
git remote add upstream https://github.com/kjartan-at-tec/git-seminar.git
#+END_SRC

** Branch and add changes
   In your cloned fork, create a new branch
#+BEGIN_SRC shell
git checkout -b my-contributions
#+END_SRC

   Modify =README.md=,  add to staging area, commit.

** Submit a pull request
   1. Make your local master branch up-to-date with origin and upstream
      1. Checkout master =git checkout master=
      2. Fetch changes from upstream repository =git pull=
      3. Checkout development branch =git checkout my-contributions=
      4. Merge master branch =git merge master=
   2. Push branch to origin =git push origin my-contributions=
   3. On GitHub, create a pull request.
** Let's go online						   :noexport:
*** Goal: Understand online/collaborative workflow
    1. Clone a repository
    2. Create a branch to work on
    3. Pull in upstream changes
    4. Merge/rebase
    5. Push to online repository
       
